/* Generated By:JavaCC: Do not edit this line. analyseConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface analyseConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEBUT = 2;
  /** RegularExpression Id. */
  int FIN = 3;
  /** RegularExpression Id. */
  int COMPOSANT = 4;
  /** RegularExpression Id. */
  int ENUM = 5;
  /** RegularExpression Id. */
  int ACTION = 6;
  /** RegularExpression Id. */
  int INTERFACE = 7;
  /** RegularExpression Id. */
  int INITIALISATION = 8;
  /** RegularExpression Id. */
  int HeaderACT = 9;
  /** RegularExpression Id. */
  int EVT = 10;
  /** RegularExpression Id. */
  int COMP = 11;
  /** RegularExpression Id. */
  int PROP = 12;
  /** RegularExpression Id. */
  int plus = 13;
  /** RegularExpression Id. */
  int choix = 14;
  /** RegularExpression Id. */
  int pointVirgule = 15;
  /** RegularExpression Id. */
  int operation = 16;
  /** RegularExpression Id. */
  int AFF = 17;
  /** RegularExpression Id. */
  int ptr = 18;
  /** RegularExpression Id. */
  int egale = 19;
  /** RegularExpression Id. */
  int paro = 20;
  /** RegularExpression Id. */
  int parf = 21;
  /** RegularExpression Id. */
  int acldo = 22;
  /** RegularExpression Id. */
  int acldf = 23;
  /** RegularExpression Id. */
  int Dpoint = 24;
  /** RegularExpression Id. */
  int virgule = 25;
  /** RegularExpression Id. */
  int et = 26;
  /** RegularExpression Id. */
  int ou = 27;
  /** RegularExpression Id. */
  int si = 28;
  /** RegularExpression Id. */
  int alors = 29;
  /** RegularExpression Id. */
  int cote = 30;
  /** RegularExpression Id. */
  int DIFF = 31;
  /** RegularExpression Id. */
  int VRAI = 32;
  /** RegularExpression Id. */
  int FAUX = 33;
  /** RegularExpression Id. */
  int TYPE = 34;
  /** RegularExpression Id. */
  int ALPHANUM = 35;
  /** RegularExpression Id. */
  int INV = 36;
  /** RegularExpression Id. */
  int ID = 37;
  /** RegularExpression Id. */
  int VALEUR = 38;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"DEBUT\"",
    "\"FIN\"",
    "<COMPOSANT>",
    "<ENUM>",
    "<ACTION>",
    "\"INTERFACE\"",
    "\"INITIALISATIONS\"",
    "\"ACTIONS\"",
    "\"EVT\"",
    "\"COMP\"",
    "\"PROP\"",
    "\"+\"",
    "\"~\"",
    "\";\"",
    "<operation>",
    "\":=\"",
    "\"::\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\",\"",
    "\"and\"",
    "\"or\"",
    "\"if\"",
    "\"then\"",
    "\"\\\'\"",
    "\"<>\"",
    "\"True\"",
    "\"False\"",
    "<TYPE>",
    "<ALPHANUM>",
    "\"INV\"",
    "<ID>",
    "<VALEUR>",
    "\".\"",
  };

}
