/* analyse.java */
/* Generated By:JavaCC: Do not edit this line. analyse.java */
import java.io.*;

public class analyse implements analyseConstants {

  static public File out = new File(FileUploaderController.dirPath+"//component.gui");
  static public FileOutputStream OutStream ;
  static public BufferedWriter buf ;
  static public Data data ;
  static public Handling h;


   static void analyze(File file ) throws ParseException {
     data = new Data () ;
     h= new Handling(data) ;

     //////
     Automata glob = new Automata (0) ;

     //////
       try
      {
        OutStream = new FileOutputStream(out);
        buf = new BufferedWriter(new OutputStreamWriter(OutStream));
       analyse  parser = new analyse(new InputStreamReader (new FileInputStream(file)));
        parser.Axiome();
      }
      catch (Exception e) {

      e.printStackTrace();
    }



      //////////////////// Display types hashMap Content
       h.displayVariables( data.getListVar());
       System.out.println("It works !");
       ////////////////// Display actions hashMap Content
       h.displayActions( data.getListAct());

       //////////////// display actions array
       int i;
       System.out.println("display actions array");
                   h.displayFileContent(data.getVectAction());
        System.out.println();
         h.generateGlobalAutom();

         // After the treatment 
         h.displayFileContent(data.getVectAction());
        System.out.println();

        //////////////
         glob =  data.getPartaef().get(data.getBlockNum()-1);

         System.out.println(glob.getFinalState());
         SaveAef sAef= new SaveAef() ;
         System.out.println("CreationDone");
         try
         {

       sAef.saveAutomata(glob) ;
       System.out.println("Saved.");

         }
         catch (Exception e) {
         e.printStackTrace();
       }
  }

///////////////////////////////////////////////////// Syntaxique //////////////////////////////////////////////////////////////////


 //Z 
  static final public void Axiome() throws ParseException {
    jj_consume_token(DEBUT);
    jj_consume_token(INTERFACE);
    Declaration();
    jj_consume_token(FIN);
    jj_consume_token(0);
  }

/////////////////// INTERFACE ////////////////////////////////////////
  static final public void Declaration() throws ParseException {Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMP:{
        jj_consume_token(COMP);
        t = jj_consume_token(ID);
buf.write(t.toString());     /// generating the  file of components
    buf.write(" { ");
    buf.newLine();
    buf.write("Type du composant : ");
        jj_consume_token(Dpoint);
        t = jj_consume_token(COMPOSANT);
buf.write(t.toString());
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case paro:{
          jj_consume_token(paro);
          t = jj_consume_token(ID);
buf.newLine();
    buf.write("propri\u00c3\u00a9taire : ");
    buf.write(t.toString());
          jj_consume_token(parf);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
buf.newLine();
        jj_consume_token(PROP);
buf.write("Propri\u00c3\u00a9t\u00c3\u00a9s : ") ;
    buf.newLine();
        Prop();
        Declaration();
        break;
        }
      case INITIALISATION:{
        Init();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (IOException e) {
e.printStackTrace();
    }
  }

  static final public void Prop() throws ParseException {Token t ;
  Token v ;
  Token w ;
    try {
      label_1:
      while (true) {
        v = jj_consume_token(ID);
buf.write("    "+v.toString());
    buf.write(":");
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case virgule:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          jj_consume_token(virgule);
          v = jj_consume_token(ID);
buf.write("    "+v.toString());
    buf.write(":");
        }
        jj_consume_token(Dpoint);
        t = jj_consume_token(TYPE);
buf.write(t.toString());
    buf.newLine();
        jj_consume_token(pointVirgule);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INV:{
        jj_consume_token(INV);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(ID);
          jj_consume_token(egale);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ALPHANUM:{
            jj_consume_token(ALPHANUM);
            break;
            }
          case VALEUR:{
            jj_consume_token(VALEUR);
            break;
            }
          case VRAI:{
            jj_consume_token(VRAI);
            break;
            }
          case FAUX:{
            jj_consume_token(FAUX);
            break;
            }
          case ENUM:{
            jj_consume_token(ENUM);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(EVT);
buf.write("Ev\u00c3\u00a8nement : ");
    buf.newLine();
      label_4:
      while (true) {
        w = jj_consume_token(ACTION);
buf.write("   "+w.toString());
    buf.newLine();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case paro:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(paro);
          jj_consume_token(ID);
          jj_consume_token(parf);
        }
        condition();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ACTION:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
buf.write(" } ");
    buf.newLine();
h.addVar(v.image,t.image);
    } catch (IOException e) {
e.printStackTrace();
    }
  }

  static final public void condition() throws ParseException {
    jj_consume_token(acldo);
    jj_consume_token(si);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case egale:{
      jj_consume_token(egale);
      break;
      }
    case DIFF:{
      jj_consume_token(DIFF);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENUM:{
      jj_consume_token(ENUM);
      break;
      }
    case VALEUR:{
      jj_consume_token(VALEUR);
      break;
      }
    case ALPHANUM:{
      jj_consume_token(ALPHANUM);
      break;
      }
    case VRAI:{
      jj_consume_token(VRAI);
      break;
      }
    case FAUX:{
      jj_consume_token(FAUX);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(alors);
    label_6:
    while (true) {
      operation();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case et:
        case ou:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ou:{
          jj_consume_token(ou);
          break;
          }
        case et:{
          jj_consume_token(et);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        operation();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case pointVirgule:{
        jj_consume_token(pointVirgule);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(acldf);
  }

  static final public void operation() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:{
      jj_consume_token(39);
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(AFF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALPHANUM:{
      jj_consume_token(ALPHANUM);
      break;
      }
    case VALEUR:{
      jj_consume_token(VALEUR);
      break;
      }
    case VRAI:{
      jj_consume_token(VRAI);
      break;
      }
    case FAUX:{
      jj_consume_token(FAUX);
      break;
      }
    case ENUM:{
      jj_consume_token(ENUM);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////////

/////////////////// INITIALISATION ///////////////////////////////
  static final public void Init() throws ParseException {
    try {
      jj_consume_token(INITIALISATION);
buf.close();
      E1();
    } catch (IOException e) {
e.printStackTrace();
    }
  }

  static final public void E1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      jj_consume_token(ptr);
      operation();
      jj_consume_token(pointVirgule);
      E1();
      break;
      }
    case HeaderACT:{
      S();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/////////////////////////////////////////////////////////////////

//////////////// ACTIONS ////////////////////////////////////////
  static final public 
void S() throws ParseException {
    jj_consume_token(HeaderACT);
    E();
    A();
  }

// E
  static final public void E() throws ParseException {Token op,act,id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ACTION:{
      act = jj_consume_token(ACTION);
      jj_consume_token(paro);
      id = jj_consume_token(ID);
data.getVectAction().add(Integer.toString(data.getCpt()));h.addAct(data.getCpt(),act.image+"("+id.image+")");data.setCpt( data.getCpt()+1);
      jj_consume_token(parf);
      A();
      break;
      }
    case acldo:{
      jj_consume_token(acldo);
data.getVectAction().add("{");
      E();
      jj_consume_token(acldf);
data.getVectAction().add("}");
      A();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// A
  static final public void A() throws ParseException {Token op,act,id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case pointVirgule:{
      op = jj_consume_token(pointVirgule);
data.getVectAction().add(op.image);
      E();
      break;
      }
    case operation:{
      op = jj_consume_token(operation);
data.getVectAction().add(op.image);
      E();
      break;
      }
    default:
      jj_la1[19] = jj_gen;

    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public analyseTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100000,0x900,0x2000000,0x0,0x0,0x20,0x0,0x100000,0x40,0x80080000,0x20,0xc000000,0xc000000,0x8000,0x0,0x0,0x20,0x200,0x400040,0x18000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20,0x20,0x4b,0x10,0x0,0x0,0x0,0x4b,0x0,0x0,0x0,0x20,0x80,0x6b,0x20,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public analyse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analyse(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analyseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analyse(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analyseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analyse(analyseTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analyseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
